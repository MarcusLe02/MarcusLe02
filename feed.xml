<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://marcusle02.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://marcusle02.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-19T16:06:38+00:00</updated><id>https://marcusle02.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Reinforcement Learning explained: theory</title><link href="https://marcusle02.github.io/blog/2023/images/" rel="alternate" type="text/html" title="Reinforcement Learning explained: theory"/><published>2023-10-30T21:01:00+00:00</published><updated>2023-10-30T21:01:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/images</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/images/"><![CDATA[<p>Machine Learning has become a buzzword, not just for data enthusiasts but also for the general public, particularly with the advent of technologies like ChatGPT. Typically, when we talk about Machine Learning, two main types come to mind: Supervised Learning and Unsupervised Learning, known for their roles in recognizing patterns and making predictions. However, there’s a third, less-talked-about but equally fascinating sibling that goes beyond data prediction and generation: Reinforcement Learning (RL).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between image rows, after each row, or doesn't have to be there at all. </div> <h3>Understanding Reinforcement Learning</h3> <p>At its core, Reinforcement Learning is about an agent (you can think of an agent like a robot) learning to make decisions by interacting with its environment. The goal is to perform actions that yield the highest cumulative rewards over time. What sets RL apart from other Machine Learning methods is that it doesn’t rely on pre-labeled data or historical examples. Instead, the agent learns through a process of trial and error in many iterations, making decisions and adjusting based on the outcomes of previous iterations.</p> <h3>Characteristics of RL</h3> <ul> <li><strong>Learning From Scratch:</strong> Unlike Supervised Learning, RL does not provide the agent datasets with inputs-output. Instead, the agent begins with minimal knowledge of its environment and learns by exploring.</li> <li><strong>No Direct Supervisor:</strong> There’s no external ‘teacher’ giving correct answers for the agent. It accumulates knowledge by understanding the consequences of its actions.</li> <li><strong>Delayed Feedback:</strong> Unlike typical Machine Learning, rewards in RL are often not immediate. The impact of actions may unfold over time, requiring the agent to think long-term.</li> <li><strong>Interactive Learning Cycle:</strong> The agent’s actions shape its future experiences, creating a dynamic learning environment.</li> </ul> <h3>Markov Decision Process – The Framework of RL</h3> <p>To understand RL, it’s essential to grasp the concept of a Markov Decision Process (MDP). This framework comprises five elements:</p> <ul> <li><strong>Agent:</strong> The learner that makes decisions.</li> <li><strong>Environment:</strong> The world in which the agent operates, presenting different states.</li> <li><strong>State:</strong> The current situation or context the agent finds itself in.</li> <li><strong>Action:</strong> What the agent can do at each state, to transition from one state to another.</li> <li><strong>Reward:</strong> Feedback from the environment indicating the success of an action.</li> </ul> <p>If this is your first time hearing about a Markov Decision Process (MDP), it might seem quite complex. Let’s simplify it with an example. Consider a chess game. In this context, the arrangement of pieces on the current board represents the ‘state.’ The moves you can make are the ‘actions,’ and the benefits you gain, like capturing an opponent’s piece, having a favorable board state, or ultimately winning the game, are the ‘rewards.’ The player, or in RL terms, the ‘agent,’ makes decisions (moves) aimed at maximizing these rewards.</p> <p>Below is a sample Markov chain for a day in a student’s life. Can you tell what are the agent, environment, states, actions, and rewards?</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3>Markov Decision Process – The Framework of RL</h3> <p>Building on our chess game example, let’s delve into the iterative interaction process in a Markov Decision Process (MDP), using a chess engine like Stockfish to understand how an MDP works.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/11-480.webp 480w,/assets/img/11-800.webp 800w,/assets/img/11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/11.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Stockfish 16, the most powerful chess engine in the world </div> <ol> <li><strong>Initial State and Action:</strong> Each iteration in the game begins with the engine observing the current state of the chessboard. It evaluates the positions of all pieces (both its own and the opponent’s) and decides on its next move. This move is the chosen ‘action’ in MDP terms.</li> <li><strong>Environment Response and Transition to New State:</strong> Once the engine executes its move, the chessboard (the environment) changes to a new state. This is the result of the action taken by the engine and the subsequent move by the opponent.</li> <li><strong>Reward Assessment and Strategy Adjustment:</strong> The engine receives feedback after each move. For example, if a move results in capturing an opponent’s piece, the engine might interpret this as a positive reward. This feedback helps the engine assess the effectiveness of its strategy and adjust future actions.</li> <li><strong>Continuous Learning Through Game Progression:</strong> As the game progresses, the engine continuously refines its strategy. It learns from the outcomes of previous actions and adapts to the changing dynamics of the game. Each move is a step in the learning process, aiming to improve the chances of success in future states.</li> <li><strong>Concluding an Episode:</strong> In the context of chess, a training episode concludes at the end of a single game. The engine then analyzes the overall outcome, considering the cumulative rewards and the effectiveness of its strategy throughout the game.</li> <li><strong>Beginning a New Episode:</strong> Upon starting a new game, the engine resets to a new initial state, ready to apply its refined strategy and learnings from previous games.</li> </ol> <p>This iterative process illustrates how the chess engine, acting as an RL agent within an MDP framework, continually learns and adapts its strategies with each move, seeking to optimize its gameplay over time. In reality, the training phase happens in hundreds or thousands of episodes – each game or ‘episode’ contributing to the engine’s growing experience. Over these episodes, the engine accumulates a vast array of game situations and outcomes, allowing it to refine its decision-making algorithms. This extensive training enables the engine to recognize patterns, anticipate opponent strategies, and evaluate the long-term consequences of moves.</p> <h3>Return, Policy, and Value</h3> <p>As we delve deeper into Reinforcement Learning, there are three additional key terms that are essential for anyone learning RL. These terms are not just theoretical concepts but are actively utilized in the practical coding of RL algorithms.</p> <ul> <li><strong>Return:</strong> In Reinforcement Learning, ‘return’ refers to the total amount of reward an agent accumulates over time. For our chess engine, it’s about consistently making moves that lead to success across many games. The return is a measure of the long-term effectiveness of the engine’s strategies.</li> <li><strong>Policy:</strong> The ‘policy’ is the strategy or set of rules that the agent follows while making decisions. In the chess engine’s case, this involves complex algorithms that determine the best move in each game state. A good policy balances immediate move benefits with potential future advantages.</li> <li><strong>Value:</strong> ‘Value’ in RL signifies the expected long-term return from a particular state under the current policy. It helps the agent assess which positions on the chessboard are most advantageous. High-value states are those from which the engine has a better chance of winning in the long run.</li> </ul> <p><strong>Note</strong>: In this blog, we have only touched upon these terms briefly. It’s important to understand that there’s much more complex mathematics involved in fully grasping these concepts. For those interested in diving deeper in Return, Policy, and Value in Reinforcement Learning, this comprehensive guide provides an in-depth exploration.</p> <h3>Moving forward</h3> <p>We have now explored the foundational aspects of Reinforcement Learning, delving into key concepts and how they play a critical role in the strategic decision-making of an RL agent. These concepts, while presented in a simplified form here, form the backbone of any RL algorithm.</p> <p>As we move forward, our journey into Reinforcement Learning takes a practical turn. In the next post, we will shift from theory to application, focusing a coding implementation of RL. This upcoming post will provide hands-on insights into how these theoretical concepts are translated into functioning RL algorithms. We will walk through specific coding examples, and demonstrate step-by-step on how to build our first deep-learning RL model.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included images could look like]]></summary></entry><entry><title type="html">a post with code</title><link href="https://marcusle02.github.io/blog/2023/openpyxl/" rel="alternate" type="text/html" title="a post with code"/><published>2023-08-18T15:09:00+00:00</published><updated>2023-08-18T15:09:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/openpyxl</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/openpyxl/"><![CDATA[<p>Oh, Excel reporting! The mere thought of it sends chills down my spine. I can hear my colleague’s voice in my head saying, “Excel reporting is a pain, a real pain!” And let’s face it, no matter how fancy tools we use, we always end up back in Excel. Why? Because everyone knows how to use it. But at what cost? Endless hours of scrolling, applying formulas, and scrolling again. It’s like being trapped in a never-ending maze of cells, with no escape in sight. Even if you find the way out, there is still a repetitive work of updating 20 Excel charts for the weekly report waiting.</p> <p>With that being said, there are benefits with Excel charts. They are highly customizable and allow for easy creation of visuals and add-ons to highlight observations that support findings. They are also often seamlessly integrated into other Microsoft Office suite, making them an essential part of many slide decks and reports on a regular basis.</p> <p>Taking into account the laborious yet accessible nature of manual Excel reporting, I attempted to automate the process using Python library openpyxl. We’ll walk through each step of the process, from accessing and manipulating data to generating charts. By the end of this post, you’ll have a solid understanding of how to streamline your Excel reporting workflow, as well as its pros and cons.</p> <h3>Problem statement</h3> <p>Imagine you are a Data Analyst who has received a real-time Excel file containing all sales orders from the Data Engineer team. Your job is to create the weekly Sales Report using PowerPoint and to create the necessary charts from the raw data to put in the slide deck.</p> <p>The manual process of creating these charts is a daunting task that requires the following steps:</p> <ul> <li>Extract and transform raw data: Format data types, add extra columns, and apply formulas for better understanding and usability.</li> <li>Create pivot tables: Aggregate raw data to facilitate improved visualization and analysis.</li> <li>Create charts from pivot tables: Generate charts to enhance the visualization of data and extract insights.</li> <li>Format charts: Ensure visually appealing and clear representation of insights by formatting charts.</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Sample pivot excel table</div> <p>This process can be time-consuming and error-prone, especially when dealing with large datasets. Let’s see if we automate this process using Python and openpyxl library, can we save time and improve the accuracy of our reports.</p> <p>I would use the sample sales data from Kaggle for the Python implementation, but you could choose any dataset you like to follow.</p> <h3>Implementation</h3> <p>Import libraries</p> <p>We’ll use the following libraries:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="n">openpyxl</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">openpyxl.chart</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">openpyxl.styles</span> <span class="kn">import</span> <span class="n">Font</span>
</code></pre></div></div> <p>Pandas will be used to read the Excel file, write formulas, create pivot tables, and write to a single Excel file. Openpyxl will be used to create charts and format the spreadsheet, and datetime will be used to save the report as the working date.</p> <p>Read Excel file &amp; add formulas Use the following code to read the necessary columns from the Excel file:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">excel_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_excel</span><span class="p">(</span><span class="sh">'</span><span class="s">sales_data_sample.xlsx</span><span class="sh">'</span><span class="p">)</span>
<span class="n">excel_df</span> <span class="o">=</span> <span class="n">excel_df</span><span class="p">[[</span><span class="sh">'</span><span class="s">QUANTITYORDERED</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PRICEEACH</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ORDERDATE</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PRODUCTLINE</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PHONE</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">COUNTRY</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div> <h1 id="image-for-current-excel_df">image for current excel_df</h1> <p>You might notice that each record only contains the unit price and its quantity, thus we need to add a column to calculate the total price of the order. Also, the data frame does not recognize the order date as a datetime data type, then we need to manipulate it a bit:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">TOTALPRICE</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">QUANTITYORDERED</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">PRICEEACH</span><span class="sh">'</span><span class="p">]</span>
<span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">ORDERDATE</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">ORDERDATE</span><span class="sh">'</span><span class="p">])</span>
<span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">MONTH_ID</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">ORDERDATE</span><span class="sh">'</span><span class="p">].</span><span class="n">dt</span><span class="p">.</span><span class="n">month</span>
<span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">YEAR_ID</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">excel_df</span><span class="p">[</span><span class="sh">'</span><span class="s">ORDERDATE</span><span class="sh">'</span><span class="p">].</span><span class="n">dt</span><span class="p">.</span><span class="n">year</span>
</code></pre></div></div> <p>In Excel, the process of creating formula columns is more cumbersome as we need to add a new column, remember the cells to reference the formula on, and copy to the whole column. In Python, we can do it intuitively by using the field names in the calculation.</p> <p>Creating pivot tables</p> <p>We can create pivot tables easily with the df.pivot_tables() function. Here are some examples of pivot tables that I use:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">yearly_sales</span> <span class="o">=</span> <span class="n">excel_df</span><span class="p">.</span><span class="nf">pivot_table</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="sh">'</span><span class="s">YEAR_ID</span><span class="sh">'</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">TOTALPRICE</span><span class="sh">'</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="sh">'</span><span class="s">sum</span><span class="sh">'</span><span class="p">)</span>

<span class="n">ytd_sales_by_country</span> <span class="o">=</span> <span class="n">excel_df</span><span class="p">[</span><span class="n">excel_df</span><span class="p">.</span><span class="n">YEAR_ID</span> <span class="o">==</span> <span class="n">excel_df</span><span class="p">.</span><span class="n">YEAR_ID</span><span class="p">.</span><span class="nf">max</span><span class="p">()].</span><span class="nf">pivot_table</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">COUNTRY</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="sh">'</span><span class="s">YEAR_ID</span><span class="sh">'</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">TOTALPRICE</span><span class="sh">'</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="sh">'</span><span class="s">sum</span><span class="sh">'</span><span class="p">)</span>

<span class="n">ytd_monthly_orders</span> <span class="o">=</span> <span class="n">excel_df</span><span class="p">[</span><span class="n">excel_df</span><span class="p">.</span><span class="n">YEAR_ID</span> <span class="o">==</span> <span class="n">excel_df</span><span class="p">.</span><span class="n">YEAR_ID</span><span class="p">.</span><span class="nf">max</span><span class="p">()].</span><span class="nf">pivot_table</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">MONTH_ID</span><span class="sh">'</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">PHONE</span><span class="sh">'</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>There are a few differences when using pivot tables in Python and Excel: the index parameter is used instead of rows in Excel, and the filter must be applied before using the pivot table. This makes the filter harder to use than in Excel, but it allows filtering with more complex conditions.</p> <p>Exporting pivot tables to Excel file After creating the pivot tables, we can save them as sheets in an Excel file with the ExcelWriter function:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">today</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">today</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">'</span><span class="s">%d%m%y</span><span class="sh">'</span><span class="p">)</span>

<span class="k">with</span> <span class="n">pd</span><span class="p">.</span><span class="nc">ExcelWriter</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Report_</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">.xlsx</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">writer</span><span class="p">:</span>
    <span class="n">yearly_sales</span><span class="p">.</span><span class="nf">to_excel</span><span class="p">(</span><span class="n">writer</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Yearly Sales</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ytd_sales_by_country</span><span class="p">.</span><span class="nf">to_excel</span><span class="p">(</span><span class="n">writer</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Yearly Sales</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ytd_monthly_orders</span><span class="p">.</span><span class="nf">to_excel</span><span class="p">(</span><span class="n">writer</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="sh">"</span><span class="s">YTD Monthly Orders</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Now the Excel file is exported in the same folder your Python script is located, and it is named with the creation date like Report_180322, which means the file is created on 18 March, 2022.</p> <p>Manipulate Excel file with openpyxl We will use the openpyxl library to create charts from the pivot tables, the documents of which could be found <a href="https://openpyxl.readthedocs.io/en/stable/index.html" target="_blank">here</a>.</p> <p>Create row and column reference</p> <p>To ensure the code continues to work with any amount of data, we need to determine the minimum and maximum active column and row of each pivot table. We must first load the workbook with load_workbook() and locate the sheet we want to work with using wb[‘sheet_name’]. Then, we can get the data location to create charts from.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">wb</span> <span class="o">=</span> <span class="nf">load_workbook</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="n">wb_filename</span><span class="p">)</span> <span class="c1"># Load workbook
</span><span class="n">sheet</span> <span class="o">=</span> <span class="n">wb</span><span class="p">[</span><span class="n">sheet_name</span><span class="p">]</span> <span class="c1"># Locate sheet
</span>
<span class="c1"># Get pivot table range
</span><span class="n">min_column</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="n">min_column</span>
<span class="n">max_column</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="n">max_column</span>
<span class="n">min_row</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="n">min_row</span>
<span class="n">max_row</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="n">max_row</span>

<span class="n">chart</span> <span class="o">=</span> <span class="nc">BarChart</span><span class="p">()</span> <span class="c1"># Initialize bar chart
</span><span class="n">data</span> <span class="o">=</span> <span class="nc">Reference</span><span class="p">(</span><span class="n">sheet</span><span class="p">,</span>
                        <span class="n">min_col</span><span class="o">=</span><span class="n">min_column</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span>
                        <span class="n">max_col</span><span class="o">=</span><span class="n">max_column</span><span class="p">,</span>
                        <span class="n">min_row</span><span class="o">=</span><span class="n">min_row</span><span class="p">,</span>
                        <span class="n">max_row</span><span class="o">=</span><span class="n">max_row</span><span class="p">)</span> <span class="c1"># Including headers
</span><span class="n">categories</span> <span class="o">=</span> <span class="nc">Reference</span><span class="p">(</span><span class="n">sheet</span><span class="p">,</span>
                        <span class="n">min_col</span><span class="o">=</span><span class="n">min_column</span><span class="p">,</span>
                        <span class="n">max_col</span><span class="o">=</span><span class="n">min_column</span><span class="p">,</span>
                        <span class="n">min_row</span><span class="o">=</span><span class="n">min_row</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span>
                        <span class="n">max_row</span><span class="o">=</span><span class="n">max_row</span><span class="p">)</span> <span class="c1"># Not including headers
</span><span class="n">chart</span><span class="p">.</span><span class="nf">add_data</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">titles_from_data</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># Adding data to charts
</span><span class="n">chart</span><span class="p">.</span><span class="nf">set_categories</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span>
</code></pre></div></div> <p>The above code block would create a bar chart for the pivot table in the specified sheet.</p> <p>Styling options for Excel charts In addition to creating charts, openpyxl also provides options for styling the charts to make them more visually appealing and understandable. Here are some examples of chart styling options:</p> <ol> <li>Set chart title: Use <code>chart.title</code> attribute to set the title of the chart.</li> <li>Set chart legend: Use <code>chart.legend</code> attribute to set the legend position of the chart.</li> <li>Set chart axis labels: Use <code>chart.x_axis.title</code> and <code>chart.y_axis.title</code> attributes to set the axis labels of the chart.</li> <li>Set series colors: Use <code>chart.series[i].graphicalProperties.solidFill</code> attribute to set the color of the i-th series of the chart.</li> <li>Set chart axis scale: Use <code>chart.x_axis.scaling.min/max</code> and <code>chart.y_axis.scaling.min/max</code> attributes to set the axis scale of the chart.</li> </ol> <p>These are only a few examples of the many styling options available for Excel charts in openpyxl. With openpyxl, you can customize various chart features, such as font styles, gridlines, borders, line styles, and more. However, I will only focus on a few styles in the code.</p> <p>Master function for creating charts To streamline the process of creating charts and referencing data, we can create a master function that accepts optional parameters for styling. This allows for easier creation of multiple charts with consistent data references from pivot tables. Check the function template below for an example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">create_chart</span><span class="p">(</span><span class="n">wb_filename</span><span class="p">,</span> <span class="n">sheet</span><span class="p">,</span> <span class="n">chart_type</span><span class="p">,</span> <span class="n">style_1</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">style_2</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="p">...):</span>

        <span class="n">wb</span> <span class="o">=</span> <span class="nf">load_workbook</span><span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="n">wb_filename</span><span class="p">)</span>
        <span class="n">sheet</span> <span class="o">=</span> <span class="n">wb</span><span class="p">[</span><span class="n">sheet</span><span class="p">]</span>
        <span class="c1"># Get pivot table range
</span>        <span class="n">min_column</span> <span class="o">=</span> <span class="n">sheet</span><span class="p">.</span><span class="n">min_column</span>
        <span class="p">.</span><span class="bp">...</span>

        <span class="c1"># Dictionary for initializing chart type
</span>        <span class="n">CHART_DICT</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">bar</span><span class="sh">'</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="nc">BarChart</span><span class="p">(),</span>
                      <span class="sh">'</span><span class="s">line</span><span class="sh">'</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="nc">LineChart</span><span class="p">(),</span>
                      <span class="sh">'</span><span class="s">pie</span><span class="sh">'</span><span class="p">:</span> <span class="k">lambda</span><span class="p">:</span> <span class="nc">PieChart</span><span class="p">(),</span> <span class="p">...}</span>
        <span class="n">chart</span> <span class="o">=</span> <span class="n">CHART_DICT</span><span class="p">[</span><span class="n">chart_type</span><span class="p">]()</span>

        <span class="c1"># Set styles if specified
</span>        <span class="k">if</span> <span class="n">style_1</span><span class="p">:</span>
                <span class="n">chart</span><span class="p">.</span><span class="n">style_1</span> <span class="o">=</span> <span class="n">style_1</span>
        <span class="bp">...</span>
                
        <span class="n">data</span> <span class="o">=</span> <span class="nc">Reference</span><span class="p">(</span><span class="n">sheet</span><span class="p">,...)</span> <span class="c1"># including headers
</span>        <span class="n">categories</span> <span class="o">=</span> <span class="nc">Reference</span><span class="p">(</span><span class="n">sheet</span><span class="p">,...)</span> <span class="c1"># not including headers
</span>        <span class="n">chart</span><span class="p">.</span><span class="nf">add_data</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">titles_from_data</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">chart</span><span class="p">.</span><span class="nf">set_categories</span><span class="p">(</span><span class="n">categories</span><span class="p">)</span>
        <span class="n">sheet</span><span class="p">.</span><span class="nf">add_chart</span><span class="p">(</span><span class="n">chart</span><span class="p">,</span> <span class="sh">"</span><span class="s">A15</span><span class="sh">"</span><span class="p">)</span> <span class="c1"># Chart placement
</span>
        <span class="n">wb</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">wb_filename</span><span class="p">)</span>
</code></pre></div></div> <p>After that, we could use this function to create charts, here is an example to create a stacked bar chart:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">create_chart</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Report_</span><span class="si">{</span><span class="n">today</span><span class="si">}</span><span class="s">.xlsx</span><span class="sh">"</span><span class="p">,</span> <span class="n">sheet</span><span class="o">=</span><span class="sh">"</span><span class="s">YTD USA Monthly Sales</span><span class="sh">"</span><span class="p">,</span>
<span class="n">chart_type</span><span class="o">=</span><span class="sh">"</span><span class="s">bar</span><span class="sh">"</span><span class="p">,</span> <span class="n">subtype</span><span class="o">=</span><span class="sh">"</span><span class="s">col</span><span class="sh">"</span><span class="p">,</span> <span class="n">grouping</span><span class="o">=</span><span class="sh">"</span><span class="s">stacked</span><span class="sh">"</span><span class="p">,</span>
<span class="n">chart_title</span><span class="o">=</span><span class="sh">"</span><span class="s">YTD USA Monthly Sales</span><span class="sh">"</span><span class="p">,</span> <span class="n">x_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Month</span><span class="sh">"</span><span class="p">,</span>
<span class="n">y_title</span><span class="o">=</span><span class="sh">"</span><span class="s">Sales</span><span class="sh">"</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">overlap</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div> <h1 id="image-for-ytd-usa-monthly-sales">Image for YTD USA Monthly Sales</h1> <p>The above chart can still be improved by adjusting spacing between columns or using a different color scheme, but you got the idea of how it work. Don’t be intimidated by the styling code – take your time to explore and test each option to achieve the desired result. Testing the styling options back-and-forth can also help to fine-tune the chart and make it visually appealing.</p> <p>Using crontab to automate the report To automate the above process, we can use a tool called crontab. This tool allows us to schedule a script to run at specific intervals, such as every week at 8 AM, on Friday. We can write a script that generates charts using openpyxl, and then use crontab to run it automatically. This saves us time and ensures that our charts are always up-to-date. In this post, I would not cover the detailed steps of setting up a crontab job, but you can find a comprehensive guide <a href="https://ostechnix.com/a-beginners-guide-to-cron-jobs/" target="_blank">here</a>.</p> <h3>Takeaways</h3> <p>For the detailed code that I use in this project, check out this <a href="https://github.com/MarcusLe02/Data-Science/blob/main/excel_report_automation/excel-automation.ipynb" target="_blank">link</a>.</p> <p>To summarize, creating charts in Excel using openpyxl is a valuable technique for data visualization and reporting. It provides numerous filtering &amp; styling customization which allow you to create professional-looking charts. Additionally, creating a master function for chart creation can streamline the process and save time for repetitive tasks, making it an efficient way to create reports.</p> <p>On the other hand, there are also some drawbacks to using openpyxl for report creation. One downside is the steep learning curve to understand the syntax, especially if you want to create highly customized charts. Another potential issue is the compatibility of the charts in different versions, as openpyxl may not always generate charts that are compatible with older versions of Excel. Nevertheless, with some practice and experimentation, you can achieve great results and impress your colleagues or clients with professional-looking charts.</p> <p>In short, if you have a large amount of data and want to automate the Excel report generation process, openpyxl is a powerful tool that can save you time and effort in the long run.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[A Walkthrough into automating Excel reports with openpyxl]]></summary></entry><entry><title type="html">a post with code</title><link href="https://marcusle02.github.io/blog/2023/address-parsing/" rel="alternate" type="text/html" title="a post with code"/><published>2023-07-30T15:09:00+00:00</published><updated>2023-07-30T15:09:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/address-parsing</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/address-parsing/"><![CDATA[<p>The accuracy and standardization of address data is critical for businesses, particularly in the e-commerce industry. Poorly parsed addresses can lead to slower delivery times, increased package returns, and unhappy customers. For data analysts, transforming raw address data into a standardized format can be a complex and daunting task, with even minor errors potentially having significant financial implications for the company.</p> <p>The goal of this article is to discuss the unique challenges posed by unstructured Vietnamese address data and to present a practical approach for extracting key information such as provinces, districts, and wards from these addresses. By exploring the characteristics of this data and sharing my own methodology, I hope to provide useful insights and strategies for addressing this common data analytics challenge.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Input: an unstructured string of Vietnamese address line
Output: province name, district name, and ward name
</code></pre></div></div> <h3>Administrative unit structure of Vietnam</h3> <p>Vietnam is divided into administrative units at three main levels: provinces/municipalities (both referred as provinces), districts/cities (both referred as districts), communes/wards/townships (all referred as wards), and villages/hamlets. At the top of the hierarchy are a combined of 63 provinces and municipalities, which are further divided into districts and cities. Rural districts are then broken down into communes and townships, while urban districts and cities are broken down into wards and communes. It is important to note that there are numeric districts and wards (Quận 7, Phường 11) that need to be considered in choosing the parsing method.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Vietnamese unit structure </div> <p>While there are further subdivisions into villages and hamlets, they are rarely used in addresses and official information about them could not be found. Therefore, they will not be included in this post. Additionally, this parsing project will not delve into deeper details such as street and alley names or specific places (e.g., Aeon Mall Hà Đông, Bến Nhà Rồng) as there is not enough data available to collect.</p> <h3>Understanding Vietnamese address writing</h3> <p>The Vietnamese alphabet consists of 29 letters, with four diacritics used in seven letters: ă, â, ê, ô, ơ, ư, and đ. An additional five diacritics indicate tone, such as à, á, ả, ã, and ạ. This makes the Vietnamese script distinct from other Latin writing systems. Additional details about these diacritics can be found at this <a href="https://vietnamesetypography.com/diacritical-details/" target="_blank">link</a>.</p> <p>Now, let’s take a look at a few examples of written address:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fulbright University Vietnam, 105 đường Tôn Dật Tiên, Phường Tân Phú, Quận 7, Thành phố Hồ Chí Minh
// Fulbright University Vietnam, 105 Ton Dat Tien Street, Tan Phu Ward, District 7, Ho Chi Minh City
</code></pre></div></div> <p>This is a clean example, all administrative units are written correctly, and they are also marked with a unit-defined word like Ward or District.</p> <p>In reality, we are more likely to see something like this:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fulbright University Vietnam, 105 Tôn Dật Tiên, Tân Phú, Q7, TP.HCM
// Fulbright University Vietnam, 105 Ton Dat Tien, Tan Phu, D7, HCMC
</code></pre></div></div> <p>Administrative units are often abbreviated or omitted in addresses. Vietnamese readers can usually understand what the unit refers to, even if it’s not spelled out completely. In the above example, “Q” or “TP.” are used to refer to a district or city/municipality, and “Tân Phú” could be used instead of “Phường Tân Phú” (Tan Phu Ward). In some cases, the name of the province is also omitted, such as in Ho Chi Minh City, where readers can infer that the address is within the city without the need for “HCMC.”</p> <p>Similarly, if an address contains “TP. Cao Bằng” (Cao Bang City), it may not include the province name “tỉnh Cao Bằng” (Cao Bang Prov.), since it’s clear that it’s from Cao Bang and redundant to repeat it. However, determining the correct province based solely on the district name can be challenging, especially when two provinces share the same district name.</p> <p>Also, there are different diacritic positions of a word in Vietnamese that do not affect its meaning, such as:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Khánh Hoà -- Khánh Hòa
Thuỷ Nguyên -- Thủy Nguyên
</code></pre></div></div> <p>While Vietnamese readers can intuitively recognize these differences, the algorithm should be designed to handle common misspellings and incorrect diacritic placement using fuzzy string matching techniques.</p> <p>Finally, it’s important to note that many people can recognize Vietnamese addresses without diacritics, such as “Fulbright University Vietnam, 105 Ton Dat Tien, Tan Phu, Quan 7.” However, to prevent ambiguity caused by similar names, the algorithm should prioritize the use of diacritics and only consider diacritic-less units as a last resort when diacritic parsing fails.</p> <p>In light of these considerations, I propose the following algorithmic process to match Vietnamese addresses:</p> <p>Step 1: Parse the province name, followed by the district name and then the ward name using their full names.</p> <p>Step 2: Similar to Step 1, but allowing for 1 misspelling or incorrect diacritic placement.</p> <p>Step 3: Similar to Step 1, but using diacritic-less unit name.</p> <p>Step 4: Similar to Step 1, but using abbreviation unit name.</p> <p>Step 5: If the district and ward names are provided without the province name, parse them and refer to the province based on the known location of the district/ward.</p> <p>The order of the algorithmic process proposed is designed to minimize the possibility of conflicts caused by random occurrences. For instance, if the algorithm first parses using abbreviations (i.e. HN, HCM), they may appear in other parts of an address could mistakenly be interpreted as administrative units (i.e. Vinh city could be mistakenly parsed from Vinhomes). Thus, we must first attempt to parse with the most specific and accurate information and gradually move towards more general and ambiguous information.</p> <h3>The Dataset</h3> <p>The dataset includes 1000 records that reflect actual customer addresses for an e-commerce business. To protect customer privacy, I have randomized the street and alley numbers while preserving the raw structure of the addresses. This allows for accurate analysis of address formats and patterns.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Sample addresses</div> <p>In addition to the customer addresses, I used a modified version of the Vietnamese administrative unit data from the General Statistics Office of Vietnam. This data includes three files for provinces, districts, and wards, with each unit’s name, code, and an accompanying RegEx Name.</p> <p>You can download the whole data package in this <a href="https://www.kaggle.com/datasets/namngl/testaddressinput" target="_blank">link</a>.</p> <h3>The Approach</h3> <p>One common approach to parsing Vietnamese addresses is to use <strong>regular expressions</strong> (RegEx) to match patterns in the address string. Regular expressions are a powerful tool for pattern matching and can be used to extract information such as the province, district, and ward from an address.</p> <p>Regular expressions consist of a combination of characters and symbols that define a pattern. For example, to extract the numeric district, we can use the pattern:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NUMERIC_DISTRICT = "q" + "(uận)?" + "(uan)?" + "<span class="p">[</span><span class="nv">. ]*[1-9</span><span class="p">][</span><span class="ss">0-9</span><span class="p">]</span>?"
</code></pre></div></div> <p>Think about why this pattern works by checking out the <a href="https://www.w3schools.com/python/gloss_python_regex_metacharacters.asp" target="_blank">RegEx metacharacters</a>.</p> <table> <tbody> <tr> <td>These patterns can be used directly on Python or stored in a CSV files, as demonstrated by some occurences in the Regex Name column. For instance, the pattern “((BRVT)</td> <td>(Bà Rịa – Vũng Tàu)</td> <td>(Bà Rịa Vũng Tàu))” can match any of the three names to province Bà Rịa-Vũng Tàu.</td> </tr> </tbody> </table> <p>However, regular expressions may not always return a result, especially if the address string is incomplete or contains errors. In such cases, we can use fuzzy matching algorithms to match the address string to a database of known addresses or to other sources of information. The algorithm prioritizes lowest Levenshtein distance, which measures the number of insertions, deletions, or substitutions needed to transform one string into another.</p> <p>By combining regular expressions and fuzzy matching algorithms, we can develop a robust system for parsing Vietnamese addresses and extracting the relevant information.</p> <h3>Implementation &amp; issues</h3> <p>For a detailed look at the code, see this <a href="https://github.com/MarcusLe02/Data-Science/blob/main/vietnam_address_parsing/vietnamese-address-parser.ipynb" target="_blank">link</a>.</p> <p>After completing the parsing steps, we should have the sample results as follows:</p> <h1 id="sample-result-image">Sample result image</h1> <p>However, there are two challenges that need to be addressed in future work. One of the main issues is that identifying abbreviations and alternative names for administrative units is a manual process, and so far, we have only covered names for Hanoi and Ho Chi Minh City. With knowledge of all other provinces, this issue can be resolved permanently.</p> <p>An additional issue arises when the algorithm matches a province name to a substring in the address that refers to something entirely different. For example, consider the below address line:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"502/26b huỳnh tấn phát; phường bình thuận; q7", parsed as Bình Thuận province
</code></pre></div></div> <p>This happens because the address line omits the actual province (HCMC), and the algorithm matches the only province-like instance “bình thuận” before attempting to match “q7” (District 7) to HCMC. To address this, we can introduce additional hierarchy conditions into the parsing process to ensure that the identified administrative unit is indeed the correct one. However, this approach is out of scope for this post and would be discuss in the future work.</p> <p>That’s all for the day. Vietnamese addresses may be unstructured and difficult to parse, but don’t worry, it’s not as bad as trying to untangle a plate of bun cha with forks. With a little patience and the right approach, you can turn those jumbled addresses into beautifully structured data, and avoid ending up with a tangled mess on your plate (or in your dataset!).</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[Parsing raw Vietnamese address data]]></summary></entry><entry><title type="html">Assessing data products - an intern’s perspective</title><link href="https://marcusle02.github.io/blog/2023/intern/" rel="alternate" type="text/html" title="Assessing data products - an intern’s perspective"/><published>2023-07-11T21:01:00+00:00</published><updated>2023-07-11T21:01:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/intern</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/intern/"><![CDATA[<p>As a Data Analyst in a several retail companies in Vietnam, I notice a recurring question in the in-house data products we delivered. As data professionals, we constantly try to measure the value that we bring to our organizations. Whether we provide ad-hoc analysis, automate processes, or feed data for machine learning, the question remains: did we produce a better return than investment? This post dives deeper into this topic by exploring areas that are often neglected in the assessment of data products from an intern’s perspective.</p> <h3>Quality vs. Time</h3> <p>At my most recent role, I experienced firsthand the pressure of delivering data quickly for business value. During a launch of a new product, the company needed insights into past product trends from competitors to overcome the stagnation of the current product, and this request is urgent for immediate recommended actions to sales team. The data team had to deliver a PowerPoint presentation as quickly as possible with the tradeoff of compromising data quality. The accuracy and completeness of the data were not verified, and potential outliers or anomalies were not identified. The primary focus was on delivering immediate business value, but it disregarded the significance of maintaining data quality, which could have led to incomplete or inaccurate insights.</p> <p>When there’s not enough time, it’s tempting to to provide incomplete data rather than nothing at all. However, deciding between timely incomplete data and delayed complete data can be complicated and dependent on the situation. It’s crucial to strike a balance between providing quick results and maintaining data quality to deliver accurate insights.</p> <h1 id="teamwork-image">teamwork image</h1> <h3>Regular reviews</h3> <p>Without regular assessments, even high-quality data products can quickly become outdated and irrelevant. For example, a retail company may have a data artefact that provides daily sales reports for each store location. Without regular assessments, this data product may not keep up with changes in the business logic, such as the addition of features in new products, changes in customer behavior, or shifts in the competitive landscape. Therefore, a continuous improvement process is vital, which includes setting up a feedback loop with users, monitoring data quality, and staying current with new technologies and practices. They may discover that some store managers need more granular data to optimize their inventory, or that the data product can be simplified by removing unnecessary fields. By addressing these areas, the company can maximize the value of their data and gain a competitive advantage.</p> <h3>What matter for us, the Interns and Freshers?</h3> <p>As a data intern or fresher, it’s not enough to learn how to build build data products. It’s equally important to understand the value of assessing these products. By being mindful of monitoring data quality, collecting informal user feedback, and staying up-to-date with new technologies and practices, they can better understand the impact of each data product on the business. Even if you are not directly involved in the decision-making process, your contributions can make a difference by suggesting improvements and areas for further exploration. By embracing a continuous improvement process and always striving to deliver the best possible value through their work, data interns and freshers can help their organizations succeed in the ever-evolving landscape of data-driven decision making.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included images could look like]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://marcusle02.github.io/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown} {% assign jupyter_path = "assets/jupyter/blog.ipynb" | relative_url %} {% capture notebook_exists %}{% file_exists
assets/jupyter/blog.ipynb %}{% endcapture %} {% if notebook_exists == "true" %} {% jupyter_notebook jupyter_path %} {% else %}
<span class="nt">&lt;p&gt;</span>Sorry, the notebook you are looking for does not exist.<span class="nt">&lt;/p&gt;</span>
{% endif %} {:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with code</title><link href="https://marcusle02.github.io/blog/2023/365ds/" rel="alternate" type="text/html" title="a post with code"/><published>2023-06-29T15:09:00+00:00</published><updated>2023-06-29T15:09:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/365ds</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/365ds/"><![CDATA[<p>When seeking entry-level data science jobs, having a strong portfolio is essential, and a project can be the essence of that portfolio. By working on a real-life project from the beginning, you can showcase various data-related skills to potential employers. One excellent project brief to consider is The 365 Learning Data Challenge, which allows you to test your creative and analytical thinking by exploring user engagement in e-Learning platforms. Moreover, the required data is already available, making it easier to get started.</p> <p>This blog post will present my final project deliverable and walk you through the various steps involved in its creation, such as querying data, visualization, and incorporating elements of storytelling.</p> <h3>Final Deliverable</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Tableau Dashboard tracking User Engagement of 365 Data Science from 1 Jan to 20 Oct – <a href="https://public.tableau.com/app/profile/marcus.le1600/viz/365DS_16761251940980/PlatformEngagementDashboard" target="_blank">Link</a> </div> <h3>1. Upload data to BigQuery</h3> <p>After downloading the data files, you can manipulate data locally using Python or Excel. I, however, recommend using a cloud-based storage service (I use BigQuery Free Plan), then using local SQL statements to retrieve the wanted data that would be used in the dashboard.</p> <p>In BigQuery, we’ll start by creating a dataset, then uploading each CSV file in the dataset. Remember to take a look at the schema for each table, partition and cluster them accordingly.</p> <h3>Final Deliverable</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">The dataset for the project</div> <p>We can try writing some DML SQL statements in the Query Editor to get the feel of the dataset, since we will mostly use SQL in the next step.</p> <h3>2. Query &amp; Manipulate data using Pandas &amp; SQL</h3> <p>In order to retrieve the data locally, we have to enable BigQuery API, install BigQuery Client Library, and make an API call to run a query using the following Python codes:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">google.cloud</span> <span class="kn">import</span> <span class="n">bigquery</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">GOOGLE_APPLICATION_CREDENTIALS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./service-account.json</span><span class="sh">'</span>
<span class="n">client</span> <span class="o">=</span> <span class="n">bigquery</span><span class="p">.</span><span class="nc">Client</span><span class="p">()</span>

<span class="n">student_watch_time</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
SELECT S.student_id,
 L.minutes_watched,
 L.date_watched
FROM `database-376007.365_database.365_student_info` S
JOIN `database-376007.365_database.365_student_learning` L
ON S.student_id = L.student_id
</span><span class="sh">"""</span>

<span class="n">swt_df</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">student_watch_time</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
</code></pre></div></div> <p>Avoid delving too deeply into specific insights at this stage. Instead, focus on constructing queries that have the potential to have interesting and informative results. Take a closer look at the significance of the outcomes and investigate any related tables that might cause or result from them.</p> <p>To assist you in this process, below are some of the queries that I use as the final CSV files to connect to Tableau. Note that you can use more simple queries and then use Pandas to manipulate data.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">monthly_active_users_count</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
SELECT COUNT(DISTINCT student_id), EXTRACT (MONTH FROM date_engaged) M
FROM `database-376007.365_database.365_student_engagement` 
GROUP BY M
ORDER BY M
</span><span class="sh">"""</span>

<span class="n">top_5_rated_courses</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
SELECT CI.course_title, AVG(CR.course_rating) AS avg_rating, COUNT(DISTINCT CR.student_id) AS num_ratings,  SUM(SL.minutes_watched)/COUNT(DISTINCT CR.student_id) AS total_watched_time, COUNT(DISTINCT SL.student_id) AS num_watches
FROM `database-376007.365_database.365_course_info` CI
LEFT JOIN `database-376007.365_database.365_course_ratings` CR ON CI.course_id = CR.course_id
LEFT JOIN (
  SELECT course_id, student_id, SUM(minutes_watched) AS minutes_watched
  FROM `database-376007.365_database.365_student_learning`
  GROUP BY course_id, student_id
) SL ON CI.course_id = SL.course_id
GROUP BY CI.course_id, CI.course_title
ORDER BY AVG(CR.course_rating) DESC
LIMIT 5;
</span><span class="sh">"""</span>

<span class="n">students_master</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">
SELECT 
  S.student_id,
  S.student_country,
  S.date_registered, 
  CASE WHEN EXISTS (SELECT 1 FROM `database-376007.365_database.365_student_purchases` WHERE student_id = S.student_id) THEN </span><span class="sh">'</span><span class="s">YES</span><span class="sh">'</span><span class="s"> ELSE </span><span class="sh">'</span><span class="s">NO</span><span class="sh">'</span><span class="s"> END AS has_purchased,
  CASE WHEN EXISTS (SELECT 1 FROM `database-376007.365_database.365_student_engagement` WHERE student_id = S.student_id) THEN </span><span class="sh">'</span><span class="s">YES</span><span class="sh">'</span><span class="s"> ELSE </span><span class="sh">'</span><span class="s">NO</span><span class="sh">'</span><span class="s"> END AS has_onboarded,
FROM 
  `database-376007.365_database.365_student_info` S
</span><span class="sh">"""</span>
</code></pre></div></div> <h3>3. Store CSV files &amp; connect to Tableau</h3> <p>Remember to transform each query into the dataframe and export them into CSV files:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">swt_df</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">student_watch_time</span><span class="p">).</span><span class="nf">to_dataframe</span><span class="p">()</span>
<span class="n">swt_csv</span> <span class="o">=</span> <span class="n">swt_df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">student_watch_time.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <p>It is now time to connect the files to Tableau. There are two options: you can either connect the local files directly to Tableau, or push the files to Google Drive via the Google Drive API and then connect them to Tableau. The following example code is for the latter option:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">upload_files</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">top_5_rated_courses.csv</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">top_5_watched_courses.csv</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">students_master.csv</span><span class="sh">'</span><span class="p">,</span>
<span class="sh">'</span><span class="s">student_watch_time.csv</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">daily_active_users.csv</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">upload_files</span><span class="p">:</span>
  <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">Authorization</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">Bearer ###your-access-token###</span><span class="sh">"</span>
  <span class="p">}</span>
  <span class="n">para</span> <span class="o">=</span> <span class="p">{</span>
      <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span><span class="nb">file</span><span class="p">,</span>
      <span class="sh">"</span><span class="s">parents</span><span class="sh">"</span><span class="p">:[</span><span class="sh">"</span><span class="s">###permalink-to-directory-folder###</span><span class="sh">"</span><span class="p">]</span>
  <span class="p">}</span>
  <span class="n">files</span> <span class="o">=</span> <span class="p">{</span>
      <span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">:(</span><span class="sh">'</span><span class="s">metadata</span><span class="sh">'</span><span class="p">,</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">para</span><span class="p">),</span><span class="sh">'</span><span class="s">application/json;charset=UTF-8</span><span class="sh">'</span><span class="p">),</span>
      <span class="sh">'</span><span class="s">file</span><span class="sh">'</span><span class="p">:</span><span class="nf">open</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">./</span><span class="si">{</span><span class="nb">file</span><span class="si">}</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="sh">"</span><span class="s">https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart</span><span class="sh">"</span><span class="p">,</span>
      <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
      <span class="n">files</span><span class="o">=</span><span class="n">files</span>
  <span class="p">)</span>
</code></pre></div></div> <p>If you have successfully connected your CSV files to Tableau, you will be able to view it in Data Source tab:</p> <h1 id="image-for-the-tab">Image for the tab</h1> <h3>4. Visualization &amp; Analysis</h3> <p>During the visualization process in Tableau, it’s useful to consider a hypothetical business scenario to determine which visualizations are relevant. In my case, I chose to focus on several key metrics related to high-rating and popular courses, users’ funnels and purchase trends, and active – new users over time.</p> <p>When selecting visualizations, try to keep in mind the principle of less is more. While it’s tempting to include every charts possible to showcase all findings, it’s important to choose the right visualizations without cluttering the dashboard. A clean and concise dashboard will not only be more visually appealing, but it will also be easier for the audience to interpret.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Dashboard (without textual insights)</div> <p>The final step is to add insightful text to support each graph. This text should provide context and help viewers understand the key takeaways from the data, making the dashboard more comprehensive and impactful. By taking the time to thoughtfully craft this text, we can effectively communicate insights and even recommend actions based on the data.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption">Our final dashboard</div> <h3>Other resources</h3> <p>Tutorial for BigQuery API: <a href="https://www.youtube.com/watch?v=lLPdRRy7dfE" target="_blank">YouTube</a></p> <p>Tutorial for Google Drive API: <a href="https://www.youtube.com/watch?v=JwGzHitUVcU" target="_blank">YouTube</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[Platform Engagement Dashboard for 365 Data Science]]></summary></entry><entry><title type="html">An Excel template of Personal Finance for college students (Part 2)</title><link href="https://marcusle02.github.io/blog/2023/finance2/" rel="alternate" type="text/html" title="An Excel template of Personal Finance for college students (Part 2)"/><published>2023-06-08T21:01:00+00:00</published><updated>2023-06-08T21:01:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/finance2</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/finance2/"><![CDATA[<p>Before I proceed with this part of the series, I would like to remind you to read <a href="/blog/2023/finance1/" target="_blank">Part 1</a> if you haven’t already. In part 1, we discuss the importance of financial literacy for college students, review current budgeting tools, and introduce an Excel template for Personal Finance. I also highlight on building expense tracking habits, which is the most important step of managing Personal Finance.</p> <p>In part 2, we will delve into tracking your financial progress by focusing on monitoring your balance sheet. We will also discuss setting financial targets to help you reach your desired financial state. Please open the Balance Sheet &amp; Goals sheet of the template to easier follow the below guide.</p> <h3>Balance Sheet</h3> <p>If you’ve tracked your expenses consistently for at least one month, congratulations, you’ve taken the most difficult step towards financial literacy. With this awareness of your spending habits, you’re now ready to review your current financial state through a Balance Sheet.</p> <p>The Balance Sheet provides a comprehensive view of your assets, liabilities at present and in the future. You can specify the timespan for the Balance Sheet by adjusting the “Up to MM-YY” parameter. For instance, “Up to 06-23” means you’ll track all assets and liabilities up until June 2023. It’s a good practice to update the timespan at least twice a year, on June and December, to mark the first and second halves of the year.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Example Balance Sheet </div> <p>The Balance Sheet is divided into two sections: “At present” and “Future.” The “Future” section is further divided into “Debt” and “Expected Income/Loans.” To fill it out, simply list your current and future monetary assets and liabilities in the corresponding sections.</p> <ul> <li>At present: Make sure to include all of your accounts (main account, saving account, etc) and record the current balances in the corresponding cells (B11:B16).</li> <li>Future: Track all your expected assets and liabilities, which includes expected income/loans and debts along with their respective payment months in the corresponding cells (B19:B28).</li> </ul> <p>After logging in the balance of all types of asset and liabilities, orange cells would display your current and the expected balance (prior to deducting monthly expenses) at the end of the timespan.</p> <p>Regular review of the balance sheet allows you to monitor your financial progress and make necessary adjustments to your spending habits. I review my balance sheet for every two months, or when I have a big change in my cash flow (a new job, a need to use emergency account). It will also help you in the final step: setting short-term financial targets.</p> <h3>Setting Financial Targets</h3> <p>Since you calculated your Expected Balance, it’s time to set your Target Balance at the end of each timespan. To achieve the target, you either try to increase your income or decrease your monthly expenses. Given there are no changes in your income, the maximum amount of monthly expenses is calculated as followings:</p> <p>Monthly spending = (Expected Balance – Target Balance) / No. of months by the end of the timespan</p> <p>Let say that on Feb 1st, you target that you have at least 50M in your total balance by June, which means that you have 5 months to achieve the target. You also calculated that your Expected Balance by June is 80M. Therefore, unless there are increases to your income, the maximum spending to achieve the target is:</p> <p>(80 – 50)/5 = 6 (millions per month)</p> <p>Keep in mind that the maximum spending is subjected to changes, in case there is an unexpected change in your cash flow, so regular review of the balance sheet is necessary. In addition, I usually set the preferred spending that I try to achieve, which is equal to 80% of the maximum spending. This would help me ensure I still achieve the target in case my income is reduced in the next few months.</p> <p>Make sure that you set realistic targets, means that your maximum/preferred spending should not be too low compared to your past monthly spendings. Minimize your wasted and limit nice-to-have spendings to reach the goals, and write down your Financial Pledge can also help in committing to your targets.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Financial targets &amp; financial pledge </div> <p>Finally, remember to account for future major expenses, like buying a laptop or going on a trip, in a separate table outside of regular monthly spending. Consider these expenses as rewards for your financial progress, but adjust your financial targets to ensure it do not hinder your targets.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Expected major spendings </div> <p>The Excel template is designed to be flexible, allowing you to adapt your financial goals as your situation evolves. Through consistent and thoughtful planning, you can establish a stable financial base for your future, even while navigating college life.</p> <p><a href="downloadable-excel-file-link" download="">Download Excel Template</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included images could look like]]></summary></entry><entry><title type="html">An Excel template of Personal Finance for college students (Part 1)</title><link href="https://marcusle02.github.io/blog/2023/finance1/" rel="alternate" type="text/html" title="An Excel template of Personal Finance for college students (Part 1)"/><published>2023-06-01T21:01:00+00:00</published><updated>2023-06-01T21:01:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/finance1</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/finance1/"><![CDATA[<p>It’s the first day in the second half of 2023, and it would be a great way to start this blog by sharing a habit that I’ve built for almost two years that totally changes my life. It helps me ease all the financial worries as a college student – Expense Tracking &amp; Planning.</p> <h3>Why Personal Finance for college students is important?</h3> <p>Vietnamese college students, who are often away from their families, must manage their monthly budgets and make financial decisions on their own. Without proper control, they may overspend before receiving next monthly allowances (I spent the triple amount of the planned spending for my first month in college). Being aware and in control of their financial situations is not only important to manage the monthly spending, but also help them understand their current financial situation and plan for the future.</p> <h3>Available tools and their drawbacks</h3> <p>When it comes to managing their finances, college students have a variety of tools at their disposal. From traditional methods like budgeting with pen and paper, to modern digital solutions like budgeting apps, there are numerous options to choose from. While budgeting with pen and paper may be simple and straightforward, it can also be time-consuming and lacks the convenience of digital tools.</p> <p>Budgeting apps, like MoneyLover and Mint, are great for people with consistent income and a desire to spend time learning the app’s features. But for college students, who have fluctuating income, limited financial knowledge, and may not have the patience for a complicated app, these tools can be too much.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> MoneyLover in-app features </div> <p>A simple template for personal finance for college students, provides a more manageable solution. It has a straightforward interface, making it easier for students to build their spending tracking habits. After understanding the basics, they could then use more advanced techniques in Personal Finance.</p> <p>This template is inspired by the approach given by <a href="hieu.tv" target="_blank">hieu.tv</a> throughout Financial Freedom series, the details of which could be found <a href="https://youtu.be/lKhIompb0M0" target="_blank">here</a>. The template consists of three sheets, you can find it at the end of this blog:</p> <h3>Understanding Reinforcement Learning</h3> <p>At its core, Reinforcement Learning is about an agent (you can think of an agent like a robot) learning to make decisions by interacting with its environment. The goal is to perform actions that yield the highest cumulative rewards over time. What sets RL apart from other Machine Learning methods is that it doesn’t rely on pre-labeled data or historical examples. Instead, the agent learns through a process of trial and error in many iterations, making decisions and adjusting based on the outcomes of previous iterations.</p> <ul> <li><strong>Expenses:</strong> where you log in every spending you make</li> <li><strong>Expenses Summary:</strong> automatically summarize your spendings by month and categories, give you a broader view of your spending</li> <li><strong>Balance Sheet + Goals:</strong> where you track your cash flow, and give you room to set financial targets</li> </ul> <p>I have been using the following template and guided steps for more than a year. It indeed helps me in managing my daily tracking and planning ahead to reach short-term financial targets.</p> <h3>Build expenses tracking habits</h3> <p>The first baby step is to develop a consistent habit of tracking. By tracking every penny you make, you can identify bad and good spending and gradually build your financial literacy. Otherwise, it can be easy to start spending money on auto-pilot, and all the unrecorded tiny expenses could add up to a big gap in your bank account.</p> <p>It requires a simple work every day: log every spending record you make into the Note-taking app in your smartphone. It is also recommended to use note-taking apps that allow syncing between your phone and laptop. Each record only consists of the spending purpose &amp; the spending value. A “Petrol 50” record indicates that I spent 50,000 VND for petrol for my motorbike.</p> <p>Then, cut and paste the records into the Expenses sheet as follows:</p> <ul> <li>Paste the full records into column A</li> <li>Fill column B &amp; C for Month &amp; Category of the spending (Category is a drop-down list includes of 13 spending categories that I’ve set)</li> <li>Fill the value of the record in one of columns D, E, or F based on their importance: Must-have, Nice-to-have, Wasted</li> </ul> <p>After completing the above steps, you would get the Excel sheet similar to the one below:</p> <p>Then, you can have a summary of Monthly spending by Importance and Monthly spending by Category as follows:</p> <p>Click Expenses Summary sheet → click onto a cell in a table → Pivot Table Analyse → Refresh to update the pivot tables The pivot tables would come in handy after you build the habits for a few months, in which you can draw comparisons of your spending in each month.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img src="monthly-spending-importance-image-link" class="img-fluid rounded z-depth-1" alt="Monthly spending by Importance" zoomable="true"/> </div> </div> <div class="caption"> Monthly spending by Importance </div> <p>By summarizing your spending, you can draw your comparisons between different categories and importance levels, thus understand your current spending habit and try to improve it.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img src="monthly-spending-category-image-link" class="img-fluid rounded z-depth-1" alt="Monthly spending by Category" zoomable="true"/> </div> </div> <div class="caption"> Monthly spending by Category </div> <p>In the next part of this topic, I will share about reviewing your own Balance Sheet and setting Financial Targets. But they can not be done without your own awareness of your spending. Until then, enjoy your tracking.</p> <p><a href="downloadable-excel-file-link" download="">Download Excel Template</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what included images could look like]]></summary></entry><entry><title type="html">a post with custom blockquotes</title><link href="https://marcusle02.github.io/blog/2023/custom-blockquotes/" rel="alternate" type="text/html" title="a post with custom blockquotes"/><published>2023-05-12T19:53:00+00:00</published><updated>2023-05-12T19:53:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/custom-blockquotes</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/custom-blockquotes/"><![CDATA[<p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sites’ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/master/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> ]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="blockquotes"/><summary type="html"><![CDATA[an example of a blog post with custom blockquotes]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="https://marcusle02.github.io/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar"/><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://marcusle02.github.io/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https://marcusle02.github.io/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post as a sidebar, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2> <p data-toc-text="Customizing">If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry></feed>